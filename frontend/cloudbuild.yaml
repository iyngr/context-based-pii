# Cloud Build configuration for the Frontend service

steps:
  # Debug step to verify environment variables
  - id: 'Debug environment variables'
    name: 'gcr.io/cloud-builders/gcloud'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        echo "CONTEXT_MANAGER_URL: $$CONTEXT_MANAGER_URL"
        echo "FIREBASE_API_KEY: $$FIREBASE_API_KEY"
    secretEnv:
      - 'CONTEXT_MANAGER_URL'
      - 'FIREBASE_API_KEY'

  # Build the Docker image for the frontend
  # This step will now handle dependency installation internally via the Dockerfile
  - id: 'Build frontend image'
    name: 'gcr.io/cloud-builders/docker'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        docker build -t '${_GAR_LOCATION}-docker.pkg.dev/${PROJECT_ID}/${_GAR_REPOSITORY}/${_SERVICE_NAME}:${SHORT_SHA}'
        --build-arg "REACT_APP_FIREBASE_API_KEY=$$FIREBASE_API_KEY"
        --build-arg "REACT_APP_FIREBASE_AUTH_DOMAIN=$$FIREBASE_AUTH_DOMAIN"
        --build-arg "REACT_APP_FIREBASE_PROJECT_ID=$$FIREBASE_PROJECT_ID"
        --build-arg "REACT_APP_FIREBASE_STORAGE_BUCKET=$$FIREBASE_STORAGE_BUCKET"
        --build-arg "REACT_APP_FIREBASE_MESSAGING_SENDER_ID=$$FIREBASE_MESSAGING_SENDER_ID"
        --build-arg "REACT_APP_FIREBASE_APP_ID=$$FIREBASE_APP_ID"
        --build-arg "REACT_APP_BACKEND_URL=$$CONTEXT_MANAGER_URL"
        --cache-from '${_GAR_LOCATION}-docker.pkg.dev/${PROJECT_ID}/${_GAR_REPOSITORY}/${_SERVICE_NAME}:latest'
        .
    dir: 'frontend'
    # Make secrets available as environment variables to this build step
    secretEnv:
      - 'FIREBASE_API_KEY'
      - 'FIREBASE_AUTH_DOMAIN'
      - 'FIREBASE_PROJECT_ID'
      - 'FIREBASE_STORAGE_BUCKET'
      - 'FIREBASE_MESSAGING_SENDER_ID'
      - 'FIREBASE_APP_ID'
      - 'CONTEXT_MANAGER_URL' # Ensure CONTEXT_MANAGER_URL is also listed here

  # Push the Docker image to the container registry
  - id: 'Push frontend image'
    name: 'gcr.io/cloud-builders/docker'
    args: ['push', '${_GAR_LOCATION}-docker.pkg.dev/${PROJECT_ID}/${_GAR_REPOSITORY}/${_SERVICE_NAME}:${SHORT_SHA}']

  # Tag the image as 'latest' for caching in future builds
  - id: 'Tag frontend image as latest'
    name: 'gcr.io/cloud-builders/docker'
    args:
      - 'tag'
      - '${_GAR_LOCATION}-docker.pkg.dev/${PROJECT_ID}/${_GAR_REPOSITORY}/${_SERVICE_NAME}:${SHORT_SHA}'
      - '${_GAR_LOCATION}-docker.pkg.dev/${PROJECT_ID}/${_GAR_REPOSITORY}/${_SERVICE_NAME}:latest'

  # Push the 'latest' tag
  - id: 'Push frontend latest tag'
    name: 'gcr.io/cloud-builders/docker'
    args: ['push', '${_GAR_LOCATION}-docker.pkg.dev/${PROJECT_ID}/${_GAR_REPOSITORY}/${_SERVICE_NAME}:latest']

  # Deploy the frontend service to Cloud Run
  - id: 'Deploy frontend to Cloud Run'
    name: 'gcr.io/cloud-builders/gcloud'
    args:
      - 'run'
      - 'deploy'
      - '${_SERVICE_NAME}'
      - '--image'
      - '${_GAR_LOCATION}-docker.pkg.dev/${PROJECT_ID}/${_GAR_REPOSITORY}/${_SERVICE_NAME}:${SHORT_SHA}'
      - '--region'
      - '${_REGION}'
      - '--platform'
      - 'managed'
      - '--allow-unauthenticated' # Allow public access for the frontend application
      - '--min-instances=0'
      - '--max-instances=1'
      - '--service-account'
      - 'context-manager-sa@${PROJECT_ID}.iam.gserviceaccount.com'
    dir: 'frontend'
    secretEnv:
      # These names must match the 'env' names defined in the 'availableSecrets' section
      # These secrets are injected into the Cloud Run container at runtime
      - 'CONTEXT_MANAGER_URL'
      - 'FIREBASE_API_KEY'
      - 'FIREBASE_AUTH_DOMAIN'
      - 'FIREBASE_PROJECT_ID'
      - 'FIREBASE_STORAGE_BUCKET'
      - 'FIREBASE_MESSAGING_SENDER_ID'
      - 'FIREBASE_APP_ID'

substitutions:
  _GAR_LOCATION: 'us-central1'
  _GAR_REPOSITORY: 'ccai-services'
  _SERVICE_NAME: frontend-app # Name of the Cloud Run service
  _REGION: us-central1 # GCP region for deployment
  _FRONTEND_CACHE_BUCKET: '${PROJECT_ID}-frontend-build-cache' # This substitution is no longer strictly needed if cache steps are removed

options:
  logging: CLOUD_LOGGING_ONLY

availableSecrets:
  secretManager:
  - versionName: projects/${PROJECT_ID}/secrets/CONTEXT_MANAGER_URL/versions/latest
    env: 'CONTEXT_MANAGER_URL'
  # Add Firebase secrets here
  # These are used as build-time variables to embed config into the Docker image
  - versionName: projects/${PROJECT_ID}/secrets/FIREBASE_API_KEY/versions/latest
    env: 'FIREBASE_API_KEY'
  - versionName: projects/${PROJECT_ID}/secrets/FIREBASE_AUTH_DOMAIN/versions/latest
    env: 'FIREBASE_AUTH_DOMAIN'
  - versionName: projects/${PROJECT_ID}/secrets/FIREBASE_PROJECT_ID/versions/latest
    env: 'FIREBASE_PROJECT_ID'
  - versionName: projects/${PROJECT_ID}/secrets/FIREBASE_STORAGE_BUCKET/versions/latest
    env: 'FIREBASE_STORAGE_BUCKET'
  - versionName: projects/${PROJECT_ID}/secrets/FIREBASE_MESSAGING_SENDER_ID/versions/latest
    env: 'FIREBASE_MESSAGING_SENDER_ID'
  - versionName: projects/${PROJECT_ID}/secrets/FIREBASE_APP_ID/versions/latest
    env: 'FIREBASE_APP_ID'

